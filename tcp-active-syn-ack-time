#! /usr/bin/env perl

# Copyright (C) YangBingwu (detailyang)

use 5.006001;
use strict;
use warnings;
use Getopt::Std qw( getopts );

sub usage();

my %opts;

getopts("ht:p:d", \%opts) or die usage();

if ($opts{h}) {
	print usage();
	exit;
}

my $stap_args = $opts{a} || '';

my $port = $opts{p} or die "No Port Specified by the -p option\n";

if ($port !~ /^\d+$/) {
	die "Bad -p options value \"$port\": not look like a port"
}

my $time = $opts{t} || 5000;

if ($time !~ /^\d+$/) {
	die "Bad -t options value \"$time\": not look like time"
}

my $preamble = <<_EOC_;
probe begin {
    printf("Collecting tcp dport ($port)...syn-ack time\\n\\n")
}
_EOC_
chop $preamble;

my $stap_src = <<_EOC_;
$preamble

global collect%, intervals%


probe kernel.function("tcp_transmit_skb") {
    t = gettimeofday_us()

    tcp_state = tcp_ts_get_info_state(\$sk)
    tcp_state_str = tcp_sockstate_str(tcp_state)

    saddr = format_ipaddr(__ip_sock_saddr(\$sk), %{AF_INET%})
    daddr = format_ipaddr(__ip_sock_daddr(\$sk), %{AF_INET%})

    sport = __tcp_sock_sport(\$sk)
    dport = __tcp_sock_dport(\$sk)

    if (dport == $port) {
        if (tcp_state_str == "TCP_SYN_SENT") {
            if (!collect[saddr, sport, daddr, dport]) {
                collect[saddr, sport, daddr, dport] = t
            }
        }
        if (tcp_state_str == "TCP_ESTABLISHED") {
            syn_sent_time = collect[saddr, sport, daddr, dport]
            if (syn_sent_time) {
                intervals <<< t - syn_sent_time
                if (t - syn_sent_time > 10000) {
                    printf("%s interval %dus\\n", tz_ctime(t/1000000), t - syn_sent_time)
                }
            }
            delete collect[saddr, sport, daddr, dport]
        }
    }
}

probe timer.ms($time) {
	if (\@count(intervals) > 0) {
		printf("dport:$port min:%dus, max:%dus avg:%dus, cnt:%d\\r\\n",
				\@min(intervals), \@max(intervals), \@avg(intervals), \@count(intervals)
		      )
		print(\@hist_log(intervals))
	} else {
		printf("none\\r\\n")
	}
	exit()
}
_EOC_

if ($opts{d}) {
	print $stap_src;
	exit;
}

open my $in, "|stap -g --skip-badvars $stap_args -"
    or die "Cannot run stap: $!\n";

print $in $stap_src;

close $in;


sub usage() {
    return <<'_EOC_';
Usage:
    tcp-active-syn-ack-time [optoins]
Options:
    -a <args>           Pass extra arguments to the stap utility.
    -t <time>(ms)       Time(ms) to execute.
    -d                  Dump out the systemtap script source.
    -h                  Print this usage.
    -p <port>           Specify the tcp dport.
Examples:
    tcp-active-syn-ack-time -p 80 -t 5000
_EOC_
}
